<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><atom:link href="https://clojure-finance.github.io/datajure-website/" rel="self" type="application/rss+xml"/><title>Datajure</title><link>https://clojure-finance.github.io/datajure-website/</link><description>This site serves as documentation for the data processing domain-specific language Datajure written in Clojure.</description><lastBuildDate>Sun, 03 Sep 2023 09:02:48 +0000</lastBuildDate><generator>clj-rss</generator><item><guid>https://clojure-finance.github.io/datajure-website/datajure-website/posts-output/2023-09-02-clojask-backend/</guid><link>https://clojure-finance.github.io/datajure-website/datajure-website/posts-output/2023-09-02-clojask-backend/</link><title>Clojask Backend Implementation</title><description>Clojask is an open-source library for parallel computing of larger-than-memory datasets developed at HKU Business School.Clojask relies on Onyx for parallel computing. In Datajure, we set the number of workers to 8, which does not support manual modification by users.</description><author>YANG Ming-Tian</author><pubDate>Sat, 02 Sep 2023 00:00:00 +0000</pubDate></item><item><guid>https://clojure-finance.github.io/datajure-website/datajure-website/posts-output/2023-08-31-tablecloth-backend/</guid><link>https://clojure-finance.github.io/datajure-website/datajure-website/posts-output/2023-08-31-tablecloth-backend/</link><title>Tablecloth Backend Implementation</title><description>Tablecloth is the default backend for Datajure. It is an addition on the top of tech.ml.dataset, reorganising its existing functions into simple-to-use APIs.Detailed documentations of Tablecloth can be found on its official website.</description><author>YANG Ming-Tian</author><pubDate>Thu, 31 Aug 2023 00:00:00 +0000</pubDate></item><item><guid>https://clojure-finance.github.io/datajure-website/datajure-website/posts-output/2022-03-12-sort-by-function-implementation/</guid><link>https://clojure-finance.github.io/datajure-website/datajure-website/posts-output/2022-03-12-sort-by-function-implementation/</link><title>Sort-by Function Implementation</title><description>With the basic foundation and design implemented, we try to add more query options. One of the common options is the sort-by function.To implement the sort-by option, the query foundation is updated. For the syntax design, the third section has been changed to option section, including group-by, sort-by and future options. However, for the query to differentiate different options, keywords for different options are included. The sort-by syntax is as follows:</description><author>Parry CHOI Chong Hing</author><pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate></item><item><guid>https://clojure-finance.github.io/datajure-website/datajure-website/posts-output/2022-02-26-syntax-design/</guid><link>https://clojure-finance.github.io/datajure-website/datajure-website/posts-output/2022-02-26-syntax-design/</link><title>Syntax Design</title><description>With the foundation of the query being developed, I could start working on the syntax design itself. The syntax design is flexible with the help of macros. We could develop a syntax for our DSL as long as it is recognised by the Clojure language (i.e. following some fundamental rules and syntax imposed by Clojure).Clojure has a heavy use of expressions in the language. Every expression is separated and seen as a separate object to Clojure. It could not phrase or recognise syntax like DT[, col1,col2] - Clojure cannot extract the keywords like col1 and col2 here. In other words, spacing is very important in Clojure, every expression is separated by a space. It is a fundamental syntax of Clojure. This is the biggest limitation imposed by Clojure.</description><author>Parry CHOI Chong Hing</author><pubDate>Sat, 26 Feb 2022 00:00:00 +0000</pubDate></item><item><guid>https://clojure-finance.github.io/datajure-website/datajure-website/posts-output/2022-01-29-implementation-of-query-foundation/</guid><link>https://clojure-finance.github.io/datajure-website/datajure-website/posts-output/2022-01-29-implementation-of-query-foundation/</link><title>Implementation of Query Foundation</title><description>The implementation of the DSL query foundation went well. The biggest problem I have encountered was the group by operation. This is mainly due to the difference in the output results of the generic query and the tech.ml.dataset. The group by function in tech.ml.dataset outputs a map with the column values (or indices) to the corresponding datatable; while our query would be outputting a single datatable, similar to SQL query. The library also does not support multiple column group-by operation.To solve the difference in output, a table join between the first item in group-by datatable and the descriptive table is made. This combines all the aggregated columns and the original columns, forming a table with all columns.</description><author>Parry CHOI Chong Hing</author><pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate></item></channel></rss>